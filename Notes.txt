If you want to deserilize using serde, you should declare the following structures

#[derive(Serialize, Deserialize)]
struct DictionaryValue {
    estado: String,
    municipio: String,
    ciudad: String,
    colonia: Vec<String>
}

#[derive(Serialize, Deserialize)]
struct Dictionary {
    codigos_postales: HashMap<String, DictionaryValue>,
}

and change

//Current code
let json: serde_json::Value = serde_json::from_reader(file)
.expect("file should be proper JSON");

//To this code
let json: Dictionary = serde_json::from_reader(file)
.expect("file should be proper JSON");

show path (useful for blind deploys)

#[get("/show_path/{path}")]
async fn show_path(req: HttpRequest) -> Result<String> {
    let mut s:String = "".to_owned();
    let mut path: String = req.match_info().query("path").parse().unwrap();
    if path == "1" {
        path = "./".to_owned();
    }else if path == "2"{
        path = "../".to_owned();
    }else if path.contains("11") {
        path = path.replace("11", "/");
    }
    println!("{}",path);

    for file in fs::read_dir(path).unwrap() {
         //println!("{}", file.unwrap().path().display());
         s.push_str(file.unwrap().path().to_str().unwrap());
         s.push_str("\n ");

    }
    //println!("{}",s);
    Ok(format!("{}",s))
}